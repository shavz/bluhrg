{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/home_logo.png","path":"images/home_logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/android.png","path":"images/android.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple.png","path":"images/apple.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1554600587408},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1554600587409},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1554600587409},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1554600587409},{"_id":"themes/cactus/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1554600587409},{"_id":"themes/cactus/_config.yml","hash":"bc025721cc8a3255d009bca4b374b4cdecee4b30","modified":1554605427566},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1554600587409},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1554600587417},{"_id":"source/_posts/Post-Boot-Actions-Using-Application-Events.md","hash":"6279d1d1698737f1f032b0a9e0ab0abb37879659","modified":1554604278930},{"_id":"source/_posts/Simple-Oembed-Service-Using-Http4k-Framework.md","hash":"130351970fb61836c1e27609aba6e3d9345e31f2","modified":1554604278936},{"_id":"source/_posts/hello-world.md","hash":"d345a9e146af94c29dcf6e2bb00c0c5aaa685e05","modified":1554604278938},{"_id":"source/about/index.md","hash":"03c54ce73e5e4a94467c0591a7b93fa191f1bb4e","modified":1554604509819},{"_id":"source/search/index.md","hash":"efca7f7592e94ba5ae5d83b395bca72ae471ab22","modified":1554604249993},{"_id":"themes/cactus/.git/FETCH_HEAD","hash":"560088252388cd36ff2bcab094c70d05b234ccf9","modified":1554603842579},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554600587401},{"_id":"themes/cactus/.git/config","hash":"c9a0b9fc0b92d2337dc125357f2bb7c648badb22","modified":1554600587405},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554600574725},{"_id":"themes/cactus/.git/index","hash":"cc921f3701a21a04075a476bdbf08e1b041fc554","modified":1554605267733},{"_id":"themes/cactus/.git/packed-refs","hash":"ccb3dc4d9c5b10449d268ff76fad2b20469f03ae","modified":1554600587399},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1554600587416},{"_id":"themes/cactus/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1554600587416},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1554600587416},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1554600587416},{"_id":"themes/cactus/layout/post.ejs","hash":"b11d171ca7dc24579c5f7a34db731677a4aac471","modified":1554605659281},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1554600587410},{"_id":"themes/cactus/languages/default.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1554600587410},{"_id":"themes/cactus/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1554600587410},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1554600587410},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1554600587411},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1554600587411},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1554600587411},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1554600587411},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1554600587411},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1554600587411},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1554600587411},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1554600587411},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1554600587412},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"ca5582329d9721d58fe8504725108769080e9993","modified":1554600587412},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1554600587412},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1554600587417},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1554600587417},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1554600587417},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1554600587418},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554600574726},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554600574725},{"_id":"themes/cactus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554600574726},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554600574727},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554600574727},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554600574726},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554600574727},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554600574726},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554600574726},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554600574727},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554600574727},{"_id":"themes/cactus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554600574725},{"_id":"themes/cactus/.git/logs/HEAD","hash":"fa42e8998061c7bba84b308222850c44412e428c","modified":1554600587402},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1554600587412},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1554600587412},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1554600587413},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1554600587413},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1554600587413},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1554600587415},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1554600587415},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1554600587416},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1554600587419},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1554600587419},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1554600587437},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1554600587440},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1554600587440},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1554600587440},{"_id":"themes/cactus/source/css/style.styl","hash":"d9be82f7e7145cde78e04183afc8ff13d6a16059","modified":1554600587440},{"_id":"themes/cactus/source/images/home_logo.png","hash":"224acf6100b3145cf26c7412d38645186b8d1648","modified":1547462759000},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1554600587444},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1554600587444},{"_id":"themes/cactus/.git/objects/a4/85cc87a2926388fb06cc3e8c9694d6ad85c265","hash":"5823e71d880e4ed108904caa41e2291d611c1469","modified":1554601859770},{"_id":"themes/cactus/.git/objects/df/5822e9b29804c3c171501be1d90460b59ceb90","hash":"78ebd18357bfd3f90ff3e5fbead6600def11309b","modified":1554600997740},{"_id":"themes/cactus/.git/refs/heads/master","hash":"00e249909533a49f22a7cb3d0c619d59e29a526a","modified":1554600587402},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1554600587413},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1554600587414},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1554600587414},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1554600587414},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1554600587414},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1554600587415},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1554600587415},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1554600587415},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1554600587418},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1554600587418},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1554600587419},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1554600587419},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1554600587419},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1554600587420},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1554600587420},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1554600587421},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1554600587421},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1554600587421},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1554600587421},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1554600587421},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1554600587422},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1554600587422},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1554600587422},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1554600587422},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1554600587422},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1554600587423},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1554600587423},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1554600587423},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1554600587423},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1554600587423},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1554600587424},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1554600587424},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1554600587424},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1554600587424},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1554600587425},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1554600587425},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1554600587425},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1554600587425},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1554600587426},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1554600587426},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1554600587426},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1554600587427},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1554600587427},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1554600587428},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1554600587428},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1554600587428},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1554600587428},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1554600587429},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1554600587429},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1554600587429},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1554600587429},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1554600587429},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1554600587430},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1554600587430},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1554600587430},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1554600587430},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1554600587431},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1554600587431},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1554600587431},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1554600587432},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1554600587432},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1554600587432},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1554600587432},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1554600587432},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1554600587432},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1554600587433},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1554600587433},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1554600587433},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1554600587433},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1554600587433},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1554600587434},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1554600587434},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1554600587434},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1554600587434},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1554600587434},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1554600587435},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1554600587435},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1554600587435},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1554600587435},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1554600587435},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1554600587436},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1554600587436},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1554600587436},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1554600587436},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1554600587437},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1554600587437},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"7ff5b6a28dc3f2cd4ebfc4f5351054a18800bf96","modified":1554600587438},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1554600587438},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1554600587438},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1554600587438},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1554600587438},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1554600587439},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1554600587439},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1554600587439},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1554600587440},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1554600587501},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1554600587502},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1554600587506},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1554600587506},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1554600587509},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1554600587510},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1554600587513},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1554600587513},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1554600587516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1554600587517},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1554600587519},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1554600587519},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1554600587520},{"_id":"themes/cactus/.git/objects/pack/pack-5b58b0d4d4285be3229bc0df392bb36d06c58a13.idx","hash":"1810ac6267ef1e027962ba254eaf2a5f1b9dad11","modified":1554600587391},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1554600587468},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1554600587498},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1554600587499},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1554600587503},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1554600587505},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1554600587507},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1554600587509},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1554600587511},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1554600587512},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1554600587515},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1554600587516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1554600587518},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1554600587519},{"_id":"themes/cactus/.git/logs/refs/heads/master","hash":"fa42e8998061c7bba84b308222850c44412e428c","modified":1554600587403},{"_id":"themes/cactus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554600587401},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1554600587439},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1554600587439},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1554600587445},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1554600587455},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1554600587455},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1554600587457},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1554600587458},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1554600587458},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1554600587467},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1554600587468},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1554600587469},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1554600587446},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1554600587455},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1554600587454},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1554600587466},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/HEAD","hash":"fa42e8998061c7bba84b308222850c44412e428c","modified":1554600587401},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1554600587457},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1554600587459},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1554600587466},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1554600587479},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1554600587490},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1554600587494},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1554600587483},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1554600587490},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1554600587496},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1554600587477},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1554600587485},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1554600587487},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1554600587492},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1554600587493},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1554600587497},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1554600587452},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1554600587464},{"_id":"themes/cactus/.git/objects/pack/pack-5b58b0d4d4285be3229bc0df392bb36d06c58a13.pack","hash":"9bbe9660b45d710a91611966705bed8ffb1e9405","modified":1554600587390},{"_id":"themes/cactus/.git/objects/dc/1f4617aff4ca054e0fca15cfca84ab70d1d7c7","hash":"95a334e31a2476560c98c607e2d8cfd5ff1f8fd7","modified":1554605102036},{"_id":"themes/cactus/.git/objects/c0/2e8392291d8a5af3755dffb931ab4fc55a895c","hash":"ad4291e67378b1657a97fd77f5265167f39f6080","modified":1554605127133},{"_id":"themes/cactus/.git/objects/eb/da0aac09ce12d170b3f4c96098902fe7b9c4eb","hash":"ed0e794c80ab8d4acf0fca1f38be099e0c8b6181","modified":1554605261137},{"_id":"themes/cactus/source/images/android.png","hash":"fa05657ce2f14cfb07214760b26f86d754676920","modified":1554576238000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"f99db0dc1530c70a10bc95a26426d36372f8d125","modified":1554576238000},{"_id":"themes/cactus/source/images/apple.png","hash":"b69d8c60bf930471997113df0c01ed5c2124cc20","modified":1554576238000}],"Category":[{"name":"tutorial","_id":"cju6be2dw0003tbyb1475xdwv"},{"name":"showcase","_id":"cju6be2e00006tbybl8yq5gtr"}],"Data":[],"Page":[{"title":"about","date":"2019-04-07T02:32:56.000Z","_content":"\nHi 👋, my name is Shiveen and I'm a software engineer based out of Sydney, Australia. I like talking about all things tech and trying out new burger spots all around the world. I was first introduced to tech and electronics when I was around 8 years old in the form of a crusty old compaq (remember those, or maybe not). I spent most of my weekends tinkering with electronics and as I grew up, became fascinated with playing with old electronic equipment in the house and soldering old 8086s together and running silly assembly scripts.\n\nAside from programming and burgers. I'm also an avid hiker/camper and love to get out in the nature every once in a while. I'm hoping to start documenting my landscape shots here soon...\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-07 12:32:56\n---\n\nHi 👋, my name is Shiveen and I'm a software engineer based out of Sydney, Australia. I like talking about all things tech and trying out new burger spots all around the world. I was first introduced to tech and electronics when I was around 8 years old in the form of a crusty old compaq (remember those, or maybe not). I spent most of my weekends tinkering with electronics and as I grew up, became fascinated with playing with old electronic equipment in the house and soldering old 8086s together and running silly assembly scripts.\n\nAside from programming and burgers. I'm also an avid hiker/camper and love to get out in the nature every once in a while. I'm hoping to start documenting my landscape shots here soon...\n","updated":"2019-04-07T02:35:09.819Z","path":"about/index.html","comments":1,"layout":"page","_id":"cju6be2dt0001tbybfrihuomd","content":"<p>Hi 👋, my name is Shiveen and I’m a software engineer based out of Sydney, Australia. I like talking about all things tech and trying out new burger spots all around the world. I was first introduced to tech and electronics when I was around 8 years old in the form of a crusty old compaq (remember those, or maybe not). I spent most of my weekends tinkering with electronics and as I grew up, became fascinated with playing with old electronic equipment in the house and soldering old 8086s together and running silly assembly scripts.</p>\n<p>Aside from programming and burgers. I’m also an avid hiker/camper and love to get out in the nature every once in a while. I’m hoping to start documenting my landscape shots here soon…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi 👋, my name is Shiveen and I’m a software engineer based out of Sydney, Australia. I like talking about all things tech and trying out new burger spots all around the world. I was first introduced to tech and electronics when I was around 8 years old in the form of a crusty old compaq (remember those, or maybe not). I spent most of my weekends tinkering with electronics and as I grew up, became fascinated with playing with old electronic equipment in the house and soldering old 8086s together and running silly assembly scripts.</p>\n<p>Aside from programming and burgers. I’m also an avid hiker/camper and love to get out in the nature every once in a while. I’m hoping to start documenting my landscape shots here soon…</p>\n"},{"title":"Search","type":"search","date":"2019-04-07T02:30:10.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: Search\ntype: search\ndate: 2019-04-07 12:30:10\n---\n","updated":"2019-04-07T02:30:49.993Z","path":"search/index.html","comments":1,"layout":"page","_id":"cju6be2f0000itbybkh7rjv0w","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Post Boot Actions Using Application Events","date":"2019-01-10T07:23:18.000Z","_content":"\n## Background\n\nRecently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).\n\nNow as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn't respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done...\n\nAfter spending some time analyzing the application, we found that most of the time was being spent in the startup for [Elastic Search Transport client](https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html), which loads up several plugins, one of which is the `Transport Client` which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.\n\nTo test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that's a big gain...\n\n## Setting up post bootup logic\n\n[Spring](https://spring.io/) always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.\n\nTo solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in [Kotlin](https://kotlinlang.org/)):\n\n```kotlin\nclass EventListener {\n\n    private fun expensiveThings() {\n//        do expensive intialization steps here\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nThe code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named `expensiveThings()` , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it's controller endpoints. Inside `expensiveThings()` we can add something with heavy init. Function `bootStrap()` is where all the magic takes place. We use the spring [EventListener](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html) which gives us the ability to link any `void` returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs **ApplicationReadyEvent** which gets sent out the first time a spring boot application fully starts up.\n\nBut our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.\n\nTo achieve that we will modify our previous code as follows:\n\n```kotlin\n@Configuration\nclass EventListener {\n\n    lateinit var poststartupVar: String\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nhere we've modified the class to include a `lateinit` (if you don't know, a [lateinit](https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables) variable in kotlin is simply a variable that doesn't need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We've also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.\n\nThis should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.\n\nHowever, what if this component is a core component and we want to hard exit as soon as possible. \n\nNo problem, as demonstrated below:\n\n```kotlin\n@Configuration\nclass EventListener: ApplicationContextAware {\n\n    lateinit var poststartupVar: String\n\n    private var context: ApplicationContext? = null\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        try {\n            expensiveThings()\n        } catch (ex: Exception) {\n            panic()\n        }\n    }\n\n    private fun panic() {\n        val containerContext = this.context as ConfigurableApplicationContext\n        SpringApplication.exit(containerContext)\n    }\n}\n```\n\nHere we use the help of [ApplicationContext](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html) to inject the current running springboot application context in the even listener configuration (more details [here](https://spring.io/understanding/application-context)). In case an exception is encountered in the `bootStrap()`, the `panic()` function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that's for another blogpost).\n\n## Final notes\nA code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.\n\n","source":"_posts/Post-Boot-Actions-Using-Application-Events.md","raw":"---\ntitle: Post Boot Actions Using Application Events\ndate: 2019-01-10 18:23:18\ntags:\n- springboot\n- kotlin\ncategories:\n- tutorial\n---\n\n## Background\n\nRecently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).\n\nNow as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn't respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done...\n\nAfter spending some time analyzing the application, we found that most of the time was being spent in the startup for [Elastic Search Transport client](https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html), which loads up several plugins, one of which is the `Transport Client` which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.\n\nTo test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that's a big gain...\n\n## Setting up post bootup logic\n\n[Spring](https://spring.io/) always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.\n\nTo solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in [Kotlin](https://kotlinlang.org/)):\n\n```kotlin\nclass EventListener {\n\n    private fun expensiveThings() {\n//        do expensive intialization steps here\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nThe code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named `expensiveThings()` , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it's controller endpoints. Inside `expensiveThings()` we can add something with heavy init. Function `bootStrap()` is where all the magic takes place. We use the spring [EventListener](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html) which gives us the ability to link any `void` returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs **ApplicationReadyEvent** which gets sent out the first time a spring boot application fully starts up.\n\nBut our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.\n\nTo achieve that we will modify our previous code as follows:\n\n```kotlin\n@Configuration\nclass EventListener {\n\n    lateinit var poststartupVar: String\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nhere we've modified the class to include a `lateinit` (if you don't know, a [lateinit](https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables) variable in kotlin is simply a variable that doesn't need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We've also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.\n\nThis should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.\n\nHowever, what if this component is a core component and we want to hard exit as soon as possible. \n\nNo problem, as demonstrated below:\n\n```kotlin\n@Configuration\nclass EventListener: ApplicationContextAware {\n\n    lateinit var poststartupVar: String\n\n    private var context: ApplicationContext? = null\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        try {\n            expensiveThings()\n        } catch (ex: Exception) {\n            panic()\n        }\n    }\n\n    private fun panic() {\n        val containerContext = this.context as ConfigurableApplicationContext\n        SpringApplication.exit(containerContext)\n    }\n}\n```\n\nHere we use the help of [ApplicationContext](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html) to inject the current running springboot application context in the even listener configuration (more details [here](https://spring.io/understanding/application-context)). In case an exception is encountered in the `bootStrap()`, the `panic()` function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that's for another blogpost).\n\n## Final notes\nA code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.\n\n","slug":"Post-Boot-Actions-Using-Application-Events","published":1,"updated":"2019-04-07T02:31:18.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju6be2do0000tbybzvypo7wn","content":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).</p>\n<p>Now as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn’t respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done…</p>\n<p>After spending some time analyzing the application, we found that most of the time was being spent in the startup for <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html\" target=\"_blank\" rel=\"noopener\">Elastic Search Transport client</a>, which loads up several plugins, one of which is the <code>Transport Client</code> which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.</p>\n<p>To test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that’s a big gain…</p>\n<h2 id=\"Setting-up-post-bootup-logic\"><a href=\"#Setting-up-post-bootup-logic\" class=\"headerlink\" title=\"Setting up post bootup logic\"></a>Setting up post bootup logic</h2><p><a href=\"https://spring.io/\" target=\"_blank\" rel=\"noopener\">Spring</a> always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.</p>\n<p>To solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in <a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">Kotlin</a>):</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        do expensive intialization steps here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named <code>expensiveThings()</code> , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it’s controller endpoints. Inside <code>expensiveThings()</code> we can add something with heavy init. Function <code>bootStrap()</code> is where all the magic takes place. We use the spring <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html\" target=\"_blank\" rel=\"noopener\">EventListener</a> which gives us the ability to link any <code>void</code> returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs <strong>ApplicationReadyEvent</strong> which gets sent out the first time a spring boot application fully starts up.</p>\n<p>But our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.</p>\n<p>To achieve that we will modify our previous code as follows:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>here we’ve modified the class to include a <code>lateinit</code> (if you don’t know, a <a href=\"https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables\" target=\"_blank\" rel=\"noopener\">lateinit</a> variable in kotlin is simply a variable that doesn’t need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We’ve also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.</p>\n<p>This should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.</p>\n<p>However, what if this component is a core component and we want to hard exit as soon as possible. </p>\n<p>No problem, as demonstrated below:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span>: <span class=\"type\">ApplicationContextAware &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> context: ApplicationContext? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            expensiveThings()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ex: Exception) &#123;</span><br><span class=\"line\">            panic()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">panic</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> containerContext = <span class=\"keyword\">this</span>.context <span class=\"keyword\">as</span> ConfigurableApplicationContext</span><br><span class=\"line\">        SpringApplication.exit(containerContext)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we use the help of <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html\" target=\"_blank\" rel=\"noopener\">ApplicationContext</a> to inject the current running springboot application context in the even listener configuration (more details <a href=\"https://spring.io/understanding/application-context\" target=\"_blank\" rel=\"noopener\">here</a>). In case an exception is encountered in the <code>bootStrap()</code>, the <code>panic()</code> function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that’s for another blogpost).</p>\n<h2 id=\"Final-notes\"><a href=\"#Final-notes\" class=\"headerlink\" title=\"Final notes\"></a>Final notes</h2><p>A code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).</p>\n<p>Now as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn’t respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done…</p>\n<p>After spending some time analyzing the application, we found that most of the time was being spent in the startup for <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html\" target=\"_blank\" rel=\"noopener\">Elastic Search Transport client</a>, which loads up several plugins, one of which is the <code>Transport Client</code> which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.</p>\n<p>To test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that’s a big gain…</p>\n<h2 id=\"Setting-up-post-bootup-logic\"><a href=\"#Setting-up-post-bootup-logic\" class=\"headerlink\" title=\"Setting up post bootup logic\"></a>Setting up post bootup logic</h2><p><a href=\"https://spring.io/\" target=\"_blank\" rel=\"noopener\">Spring</a> always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.</p>\n<p>To solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in <a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">Kotlin</a>):</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        do expensive intialization steps here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named <code>expensiveThings()</code> , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it’s controller endpoints. Inside <code>expensiveThings()</code> we can add something with heavy init. Function <code>bootStrap()</code> is where all the magic takes place. We use the spring <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html\" target=\"_blank\" rel=\"noopener\">EventListener</a> which gives us the ability to link any <code>void</code> returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs <strong>ApplicationReadyEvent</strong> which gets sent out the first time a spring boot application fully starts up.</p>\n<p>But our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.</p>\n<p>To achieve that we will modify our previous code as follows:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>here we’ve modified the class to include a <code>lateinit</code> (if you don’t know, a <a href=\"https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables\" target=\"_blank\" rel=\"noopener\">lateinit</a> variable in kotlin is simply a variable that doesn’t need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We’ve also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.</p>\n<p>This should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.</p>\n<p>However, what if this component is a core component and we want to hard exit as soon as possible. </p>\n<p>No problem, as demonstrated below:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span>: <span class=\"type\">ApplicationContextAware &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> context: ApplicationContext? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            expensiveThings()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ex: Exception) &#123;</span><br><span class=\"line\">            panic()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">panic</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> containerContext = <span class=\"keyword\">this</span>.context <span class=\"keyword\">as</span> ConfigurableApplicationContext</span><br><span class=\"line\">        SpringApplication.exit(containerContext)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we use the help of <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html\" target=\"_blank\" rel=\"noopener\">ApplicationContext</a> to inject the current running springboot application context in the even listener configuration (more details <a href=\"https://spring.io/understanding/application-context\" target=\"_blank\" rel=\"noopener\">here</a>). In case an exception is encountered in the <code>bootStrap()</code>, the <code>panic()</code> function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that’s for another blogpost).</p>\n<h2 id=\"Final-notes\"><a href=\"#Final-notes\" class=\"headerlink\" title=\"Final notes\"></a>Final notes</h2><p>A code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.</p>\n"},{"title":"Simple Oembed Service Using Http4k Framework","date":"2019-03-18T00:27:06.000Z","_content":"\nRecently on my usual #githunt prowl I came across a new promising http library called [http4k](https://github.com/http4k/http4k/). The library is based on the philosophy of **Application as Function** based on the twitter paper [Your Server as a Function](https://monkey.org/~marius/funsrv.pdf) and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.\n\nNow, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. \n\n## Setting up a micro server with http4k\n\nHttp4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. \n\nTo start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:\n\n```groovy\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n    compile group: \"org.http4k\", name: \"http4k-core\", version: \"3.113.0\"\n    compile group: \"org.http4k\", name: \"http4k-server-netty\", version: \"3.113.0\"\n}\n```\n\nThis will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.\n\nFirst thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.\n\nSetting up a basic server is fairly simple and requires almost no effort.\n\n```kotlin\nfun main() {\n\n    val app = routes(\n        \"/alive\" bind GET to { Response(OK).body(\"The crew is more kahless now than vogon. biological and tightly dead.\") },\n        \"/api\" bind routes(\n            \"/embedLink\" bind GET to { request ->  Response(OK).body(getOembedData(request.query(\"link\")!!))}\n        )\n    )\n\n    val nettyServer = app.asServer(Netty(9000)).start()\n}\n```\nThe snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than <2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes `/alive` and `/api` on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The `/api` link however has an embedded route to `/embedLink` which allows us to make *GET* calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.\n\nSo, let's talk a little bit more about how we do that...\n\n## Extracting Oembed data\n\nNow oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is [Instagram](https://www.instagram.com/) which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you're keen you can read more about [here](https://oembed.com/#section2)), we'll see how we use the powerful lensing capability of http4k modules to extract oembed data.\n\nThe `getOembedData()` function from the routes code snipper in the previous section can be implemented as:\n\n```kotlin\nfun getOembedData(link: String): String {\n    val request = Request(Method.GET, \"https://api.instagram.com/oembed/?url=$link\")\n\n    val client: HttpHandler = JavaHttpClient()\n\n    val igLens = Body.auto<IgOembedResponse>().toLens()\n\n    return igLens.extract(client(request)).html\n}\n```\n\nHere we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  \n\nTo actually parse the returned response from instagram, we use a very nifty feature in http4k called [Lenses](https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/) which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an [Maybe](https://en.wikipedia.org/wiki/Monad_(functional_programming)#An_example:_Maybe) using functional extension libraries for kotlin such as [Arrow](https://arrow-kt.io/).\n\nTo actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:\n\n```kotlin\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class IgOembedResponse(\n    val version: String?,\n    val title: String?,\n    @JsonAlias(\"author_name\")\n    val authorName: String?,\n    @JsonAlias(\"author_url\")\n    val authorUrl: String?,\n    @JsonAlias(\"author_id\")\n    val authorId: Long?,\n    @JsonAlias(\"media_id\")\n    val mediaId: String?,\n    @JsonAlias(\"provider_name\")\n    val providerName: String?,\n    @JsonAlias(\"provider_url\")\n    val providerUrl: String?,\n    val type: String?,\n    val width: Int?,\n    val height: Int?,\n    val html: String,\n    @JsonAlias(\"thumbnail_url\")\n    val thumbnailUrl: String?,\n    @JsonAlias(\"thumbnail_width\")\n    val thumbnailWidth: String?,\n    @JsonAlias(\"thumbnail_height\")\n    val thumbnailHeight: String?\n)\n```\n\nIn this example, I've used the `@JsonIgnoreProperties` and `@JsonAlias` annotations from [jackson](https://github.com/FasterXML/jackson) which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as [Gson](https://github.com/google/gson), [moshi](https://github.com/square/moshi) etc. as plugins. Just remember to add the library of your choice in your build.gradle.\n\nFinally, going back to the our code snippet for `getOembedData` introduced earlier, we first setup a new client:\n\n```kotlin\nval client: HttpHandler = JavaHttpClient()\n```\n\nwhich gives us a new Java based http client, which is a simple implementation of a simple Request -> Response client as a function introduced in the [previous section](## Setting up a micro server with http4k). All it does is take a request and parses the response as a bytestream. \n\nTo parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:\n\n```kotlin\nigLens.extract(client(request))\n```\n\nif the request is succesful, we will get an object parsed into the `IgOembedResponse` type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.\n\n\n### Final Notes\nIn the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located [here](https://github.com/shavz/koember) and it also contains the instructions on how to call the aws lambda function to get the oembed responses.\n\nAll in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.\n","source":"_posts/Simple-Oembed-Service-Using-Http4k-Framework.md","raw":"---\ntitle: Simple Oembed Service Using Http4k Framework\ndate: 2019-03-18 11:27:06\ntags:\n- http4k\n- kotlin\n- oembed\ncategories:\n- showcase\n---\n\nRecently on my usual #githunt prowl I came across a new promising http library called [http4k](https://github.com/http4k/http4k/). The library is based on the philosophy of **Application as Function** based on the twitter paper [Your Server as a Function](https://monkey.org/~marius/funsrv.pdf) and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.\n\nNow, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. \n\n## Setting up a micro server with http4k\n\nHttp4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. \n\nTo start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:\n\n```groovy\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n    compile group: \"org.http4k\", name: \"http4k-core\", version: \"3.113.0\"\n    compile group: \"org.http4k\", name: \"http4k-server-netty\", version: \"3.113.0\"\n}\n```\n\nThis will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.\n\nFirst thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.\n\nSetting up a basic server is fairly simple and requires almost no effort.\n\n```kotlin\nfun main() {\n\n    val app = routes(\n        \"/alive\" bind GET to { Response(OK).body(\"The crew is more kahless now than vogon. biological and tightly dead.\") },\n        \"/api\" bind routes(\n            \"/embedLink\" bind GET to { request ->  Response(OK).body(getOembedData(request.query(\"link\")!!))}\n        )\n    )\n\n    val nettyServer = app.asServer(Netty(9000)).start()\n}\n```\nThe snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than <2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes `/alive` and `/api` on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The `/api` link however has an embedded route to `/embedLink` which allows us to make *GET* calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.\n\nSo, let's talk a little bit more about how we do that...\n\n## Extracting Oembed data\n\nNow oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is [Instagram](https://www.instagram.com/) which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you're keen you can read more about [here](https://oembed.com/#section2)), we'll see how we use the powerful lensing capability of http4k modules to extract oembed data.\n\nThe `getOembedData()` function from the routes code snipper in the previous section can be implemented as:\n\n```kotlin\nfun getOembedData(link: String): String {\n    val request = Request(Method.GET, \"https://api.instagram.com/oembed/?url=$link\")\n\n    val client: HttpHandler = JavaHttpClient()\n\n    val igLens = Body.auto<IgOembedResponse>().toLens()\n\n    return igLens.extract(client(request)).html\n}\n```\n\nHere we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  \n\nTo actually parse the returned response from instagram, we use a very nifty feature in http4k called [Lenses](https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/) which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an [Maybe](https://en.wikipedia.org/wiki/Monad_(functional_programming)#An_example:_Maybe) using functional extension libraries for kotlin such as [Arrow](https://arrow-kt.io/).\n\nTo actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:\n\n```kotlin\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class IgOembedResponse(\n    val version: String?,\n    val title: String?,\n    @JsonAlias(\"author_name\")\n    val authorName: String?,\n    @JsonAlias(\"author_url\")\n    val authorUrl: String?,\n    @JsonAlias(\"author_id\")\n    val authorId: Long?,\n    @JsonAlias(\"media_id\")\n    val mediaId: String?,\n    @JsonAlias(\"provider_name\")\n    val providerName: String?,\n    @JsonAlias(\"provider_url\")\n    val providerUrl: String?,\n    val type: String?,\n    val width: Int?,\n    val height: Int?,\n    val html: String,\n    @JsonAlias(\"thumbnail_url\")\n    val thumbnailUrl: String?,\n    @JsonAlias(\"thumbnail_width\")\n    val thumbnailWidth: String?,\n    @JsonAlias(\"thumbnail_height\")\n    val thumbnailHeight: String?\n)\n```\n\nIn this example, I've used the `@JsonIgnoreProperties` and `@JsonAlias` annotations from [jackson](https://github.com/FasterXML/jackson) which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as [Gson](https://github.com/google/gson), [moshi](https://github.com/square/moshi) etc. as plugins. Just remember to add the library of your choice in your build.gradle.\n\nFinally, going back to the our code snippet for `getOembedData` introduced earlier, we first setup a new client:\n\n```kotlin\nval client: HttpHandler = JavaHttpClient()\n```\n\nwhich gives us a new Java based http client, which is a simple implementation of a simple Request -> Response client as a function introduced in the [previous section](## Setting up a micro server with http4k). All it does is take a request and parses the response as a bytestream. \n\nTo parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:\n\n```kotlin\nigLens.extract(client(request))\n```\n\nif the request is succesful, we will get an object parsed into the `IgOembedResponse` type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.\n\n\n### Final Notes\nIn the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located [here](https://github.com/shavz/koember) and it also contains the instructions on how to call the aws lambda function to get the oembed responses.\n\nAll in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.\n","slug":"Simple-Oembed-Service-Using-Http4k-Framework","published":1,"updated":"2019-04-07T02:31:18.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju6be2du0002tbybccv8aj00","content":"<p>Recently on my usual #githunt prowl I came across a new promising http library called <a href=\"https://github.com/http4k/http4k/\" target=\"_blank\" rel=\"noopener\">http4k</a>. The library is based on the philosophy of <strong>Application as Function</strong> based on the twitter paper <a href=\"https://monkey.org/~marius/funsrv.pdf\" target=\"_blank\" rel=\"noopener\">Your Server as a Function</a> and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.</p>\n<p>Now, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. </p>\n<h2 id=\"Setting-up-a-micro-server-with-http4k\"><a href=\"#Setting-up-a-micro-server-with-http4k\" class=\"headerlink\" title=\"Setting up a micro server with http4k\"></a>Setting up a micro server with http4k</h2><p>Http4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. </p>\n<p>To start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-core\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-server-netty\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.</p>\n<p>First thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.</p>\n<p>Setting up a basic server is fairly simple and requires almost no effort.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> app = routes(</span><br><span class=\"line\">        <span class=\"string\">\"/alive\"</span> bind GET to &#123; Response(OK).body(<span class=\"string\">\"The crew is more kahless now than vogon. biological and tightly dead.\"</span>) &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"/api\"</span> bind routes(</span><br><span class=\"line\">            <span class=\"string\">\"/embedLink\"</span> bind GET to &#123; request -&gt;  Response(OK).body(getOembedData(request.query(<span class=\"string\">\"link\"</span>)!!))&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> nettyServer = app.asServer(Netty(<span class=\"number\">9000</span>)).start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than &lt;2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes <code>/alive</code> and <code>/api</code> on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The <code>/api</code> link however has an embedded route to <code>/embedLink</code> which allows us to make <em>GET</em> calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.</p>\n<p>So, let’s talk a little bit more about how we do that…</p>\n<h2 id=\"Extracting-Oembed-data\"><a href=\"#Extracting-Oembed-data\" class=\"headerlink\" title=\"Extracting Oembed data\"></a>Extracting Oembed data</h2><p>Now oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is <a href=\"https://www.instagram.com/\" target=\"_blank\" rel=\"noopener\">Instagram</a> which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you’re keen you can read more about <a href=\"https://oembed.com/#section2\" target=\"_blank\" rel=\"noopener\">here</a>), we’ll see how we use the powerful lensing capability of http4k modules to extract oembed data.</p>\n<p>The <code>getOembedData()</code> function from the routes code snipper in the previous section can be implemented as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getOembedData</span><span class=\"params\">(link: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> request = Request(Method.GET, <span class=\"string\">\"https://api.instagram.com/oembed/?url=<span class=\"variable\">$link</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> igLens = Body.auto&lt;IgOembedResponse&gt;().toLens()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> igLens.extract(client(request)).html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  </p>\n<p>To actually parse the returned response from instagram, we use a very nifty feature in http4k called <a href=\"https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/\" target=\"_blank\" rel=\"noopener\">Lenses</a> which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming\" target=\"_blank\" rel=\"noopener\">Maybe</a>#An_example:_Maybe) using functional extension libraries for kotlin such as <a href=\"https://arrow-kt.io/\" target=\"_blank\" rel=\"noopener\">Arrow</a>.</p>\n<p>To actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IgOembedResponse</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> version: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorId: <span class=\"built_in\">Long</span>?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"media_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mediaId: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerUrl: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> type: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> width: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> height: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> html: String,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_width\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailWidth: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_height\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailHeight: String?</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>In this example, I’ve used the <code>@JsonIgnoreProperties</code> and <code>@JsonAlias</code> annotations from <a href=\"https://github.com/FasterXML/jackson\" target=\"_blank\" rel=\"noopener\">jackson</a> which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as <a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"noopener\">Gson</a>, <a href=\"https://github.com/square/moshi\" target=\"_blank\" rel=\"noopener\">moshi</a> etc. as plugins. Just remember to add the library of your choice in your build.gradle.</p>\n<p>Finally, going back to the our code snippet for <code>getOembedData</code> introduced earlier, we first setup a new client:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br></pre></td></tr></table></figure>\n<p>which gives us a new Java based http client, which is a simple implementation of a simple Request -&gt; Response client as a function introduced in the <a href=\"## Setting up a micro server with http4k\">previous section</a>. All it does is take a request and parses the response as a bytestream. </p>\n<p>To parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">igLens.extract(client(request))</span><br></pre></td></tr></table></figure>\n<p>if the request is succesful, we will get an object parsed into the <code>IgOembedResponse</code> type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.</p>\n<h3 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h3><p>In the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located <a href=\"https://github.com/shavz/koember\" target=\"_blank\" rel=\"noopener\">here</a> and it also contains the instructions on how to call the aws lambda function to get the oembed responses.</p>\n<p>All in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently on my usual #githunt prowl I came across a new promising http library called <a href=\"https://github.com/http4k/http4k/\" target=\"_blank\" rel=\"noopener\">http4k</a>. The library is based on the philosophy of <strong>Application as Function</strong> based on the twitter paper <a href=\"https://monkey.org/~marius/funsrv.pdf\" target=\"_blank\" rel=\"noopener\">Your Server as a Function</a> and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.</p>\n<p>Now, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. </p>\n<h2 id=\"Setting-up-a-micro-server-with-http4k\"><a href=\"#Setting-up-a-micro-server-with-http4k\" class=\"headerlink\" title=\"Setting up a micro server with http4k\"></a>Setting up a micro server with http4k</h2><p>Http4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. </p>\n<p>To start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-core\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-server-netty\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.</p>\n<p>First thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.</p>\n<p>Setting up a basic server is fairly simple and requires almost no effort.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> app = routes(</span><br><span class=\"line\">        <span class=\"string\">\"/alive\"</span> bind GET to &#123; Response(OK).body(<span class=\"string\">\"The crew is more kahless now than vogon. biological and tightly dead.\"</span>) &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"/api\"</span> bind routes(</span><br><span class=\"line\">            <span class=\"string\">\"/embedLink\"</span> bind GET to &#123; request -&gt;  Response(OK).body(getOembedData(request.query(<span class=\"string\">\"link\"</span>)!!))&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> nettyServer = app.asServer(Netty(<span class=\"number\">9000</span>)).start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than &lt;2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes <code>/alive</code> and <code>/api</code> on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The <code>/api</code> link however has an embedded route to <code>/embedLink</code> which allows us to make <em>GET</em> calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.</p>\n<p>So, let’s talk a little bit more about how we do that…</p>\n<h2 id=\"Extracting-Oembed-data\"><a href=\"#Extracting-Oembed-data\" class=\"headerlink\" title=\"Extracting Oembed data\"></a>Extracting Oembed data</h2><p>Now oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is <a href=\"https://www.instagram.com/\" target=\"_blank\" rel=\"noopener\">Instagram</a> which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you’re keen you can read more about <a href=\"https://oembed.com/#section2\" target=\"_blank\" rel=\"noopener\">here</a>), we’ll see how we use the powerful lensing capability of http4k modules to extract oembed data.</p>\n<p>The <code>getOembedData()</code> function from the routes code snipper in the previous section can be implemented as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getOembedData</span><span class=\"params\">(link: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> request = Request(Method.GET, <span class=\"string\">\"https://api.instagram.com/oembed/?url=<span class=\"variable\">$link</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> igLens = Body.auto&lt;IgOembedResponse&gt;().toLens()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> igLens.extract(client(request)).html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  </p>\n<p>To actually parse the returned response from instagram, we use a very nifty feature in http4k called <a href=\"https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/\" target=\"_blank\" rel=\"noopener\">Lenses</a> which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming\" target=\"_blank\" rel=\"noopener\">Maybe</a>#An_example:_Maybe) using functional extension libraries for kotlin such as <a href=\"https://arrow-kt.io/\" target=\"_blank\" rel=\"noopener\">Arrow</a>.</p>\n<p>To actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IgOembedResponse</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> version: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorId: <span class=\"built_in\">Long</span>?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"media_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mediaId: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerUrl: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> type: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> width: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> height: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> html: String,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_width\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailWidth: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_height\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailHeight: String?</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>In this example, I’ve used the <code>@JsonIgnoreProperties</code> and <code>@JsonAlias</code> annotations from <a href=\"https://github.com/FasterXML/jackson\" target=\"_blank\" rel=\"noopener\">jackson</a> which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as <a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"noopener\">Gson</a>, <a href=\"https://github.com/square/moshi\" target=\"_blank\" rel=\"noopener\">moshi</a> etc. as plugins. Just remember to add the library of your choice in your build.gradle.</p>\n<p>Finally, going back to the our code snippet for <code>getOembedData</code> introduced earlier, we first setup a new client:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br></pre></td></tr></table></figure>\n<p>which gives us a new Java based http client, which is a simple implementation of a simple Request -&gt; Response client as a function introduced in the <a href=\"## Setting up a micro server with http4k\">previous section</a>. All it does is take a request and parses the response as a bytestream. </p>\n<p>To parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">igLens.extract(client(request))</span><br></pre></td></tr></table></figure>\n<p>if the request is succesful, we will get an object parsed into the <code>IgOembedResponse</code> type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.</p>\n<h3 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h3><p>In the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located <a href=\"https://github.com/shavz/koember\" target=\"_blank\" rel=\"noopener\">here</a> and it also contains the instructions on how to call the aws lambda function to get the oembed responses.</p>\n<p>All in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.</p>\n"},{"title":"Hello World","date":"2019-01-08T00:26:16.000Z","_content":"\nObligatory hello world post 🚀\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-01-08 11:26:16\n---\n\nObligatory hello world post 🚀\n","slug":"hello-world","published":1,"updated":"2019-04-07T02:31:18.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju6be2dy0005tbybdyauon2u","content":"<p>Obligatory hello world post 🚀</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Obligatory hello world post 🚀</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cju6be2do0000tbybzvypo7wn","category_id":"cju6be2dw0003tbyb1475xdwv","_id":"cju6be2e10008tbyby2pnrk09"},{"post_id":"cju6be2du0002tbybccv8aj00","category_id":"cju6be2e00006tbybl8yq5gtr","_id":"cju6be2e1000ctbybnpiy3axu"}],"PostTag":[{"post_id":"cju6be2do0000tbybzvypo7wn","tag_id":"cju6be2dy0004tbybb4ge00v5","_id":"cju6be2e1000atbybipxrdy9f"},{"post_id":"cju6be2do0000tbybzvypo7wn","tag_id":"cju6be2e00007tbyb5pzkoino","_id":"cju6be2e1000btbybtiumj6yc"},{"post_id":"cju6be2du0002tbybccv8aj00","tag_id":"cju6be2e10009tbyb9blu4z9g","_id":"cju6be2e3000ftbybr15u0t52"},{"post_id":"cju6be2du0002tbybccv8aj00","tag_id":"cju6be2e00007tbyb5pzkoino","_id":"cju6be2e3000gtbybfrk63utd"},{"post_id":"cju6be2du0002tbybccv8aj00","tag_id":"cju6be2e3000etbyb0hz46qzg","_id":"cju6be2e3000htbybmsm10wkd"}],"Tag":[{"name":"springboot","_id":"cju6be2dy0004tbybb4ge00v5"},{"name":"kotlin","_id":"cju6be2e00007tbyb5pzkoino"},{"name":"http4k","_id":"cju6be2e10009tbyb9blu4z9g"},{"name":"oembed","_id":"cju6be2e3000etbyb0hz46qzg"}]}}